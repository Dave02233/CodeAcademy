REST requires that a client make a request to the server in order to retrieve or modify data on the server. 
A request generally consists of:

an HTTP verb, which defines what kind of operation to perform
a header, which allows the client to pass along information about the request
a path to a resource
an optional message body containing data

In the header of the request, the client sends the type of content that it is able to receive from the server. 
This is called the Accept field, and it ensures that the server does not send data that cannot be understood or 
processed by the client.

MIME Types, used to specify the content types in the Accept field, consist of a type and a subtype. 
They are separated by a slash (/).

For example, a text file containing HTML would be specified with the type text/html.
Other types and commonly used subtypes:

image — image/png, image/jpeg, image/gif
audio — audio/wav, audio/mpeg
video — video/mp4, video/ogg
application — application/json, application/pdf, application/xml, application/octet-stream

For example, a client accessing a resource with id 23 in an articles resource on a server 
might send a GET request like this:
GET /articles/23
Accept: text/html, application/xhtml


Requests must contain a path to a resource that the operation should be performed on.
If we are trying to access a single resource, we would need to append an id to the path. 
For example: GET fashionboutique.com/customers/:id — retrieves the item in the customers resource with the id specified. 
DELETE fashionboutique.com/customers/:id — deletes the item in the customers resource with the id specified.


In cases where the server is sending a data payload to the client, the server must include a content-type in the header 
of the response. This content-type header field alerts the client to the type of data it is sending in the response body. 
These content types are MIME Types, just as they are in the accept field of the request header. 
The content-type that the server sends back in the response should be one of the options that the client specified 
in the accept field of the request.

For example, when a client is accessing a resource with id 23 in an articles resource with this GET Request:

GET /articles/23 HTTP/1.1
Accept: text/html, application/xhtml

The server might send back the content with the response header:

HTTP/1.1 200 (OK)
Content-Type: text/html

Status code	Meaning
200 (OK)	This is the standard response for successful HTTP requests.
201 (CREATED)	This is the standard response for an HTTP request that resulted in an item being successfully created.
204 (NO CONTENT)	This is the standard response for successful HTTP requests, where nothing is being returned in the response body.
400 (BAD REQUEST)	The request cannot be processed because of bad request syntax, excessive size, or another client error.
403 (FORBIDDEN)	The client does not have permission to access this resource.
404 (NOT FOUND)	The resource could not be found at this time. It is possible it was deleted, or does not exist yet.
500 (INTERNAL SERVER ERROR)	The generic answer for an unexpected failure if there is no more specific information available.


Examples of Requests and Responses
Let's say we have an application that allows you to view, create, edit, and delete customers and orders for 
a small clothing store hosted at fashionboutique.com. We could create an HTTP API that allows a client to perform these 
functions:

If we wanted to view all customers, the request would look like this:

GET http://fashionboutique.com/customers
Accept: application/json

A possible response header would look like:

Status Code: 200 (OK)
Content-type: application/json

followed by the customers data requested in application/json format.



Create a new customer by posting the data:

POST http://fashionboutique.com/customers
Body:
{
  “customer”: {
    “name” = “Scylla Buss”,
    “email” = “scylla.buss@codecademy.org”
  }
}

The server then generates an id for that object and returns it back to the client, with a header like:

201 (CREATED)
Content-type: application/json



To view a single customer we GET it by specifying that customer’s id:

GET http://fashionboutique.com/customers/123
Accept: application/json

A possible response header would look like:

Status Code: 200 (OK)
Content-type: application/json

followed by the data for the customer resource with id 23 in application/json format.



We can update that customer by PUT ting the new data:

PUT http://fashionboutique.com/customers/123
Body:
{
  “customer”: {
    “name” = “Scylla Buss”,
    “email” = “scyllabuss1@codecademy.com”
  }
}

A possible response header would have Status Code: 200 (OK), to notify the client that the item with id 123 has been modified.




We can also DELETE that customer by specifying its id:

DELETE http://fashionboutique.com/customers/123

The response would have a header containing Status Code: 204 (NO CONTENT), notifying the client that the item with id 123 has been deleted, and nothing in the body.